package org.firstinspires.ftc.teamcode.Autonomous1;

/*

Created By: Saajan Patel 




*/

import com.qualcomm.hardware.modernrobotics.ModernRoboticsI2cGyro;
import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.robotcore.hardware.GyroSensor;
import com.qualcomm.robotcore.hardware.OpticalDistanceSensor;
import com.qualcomm.robotcore.util.ElapsedTime;
import com.qualcomm.robotcore.util.Range;

@Autonomous(name = "FtcAuto", group = "Autonomous")
//@Disabled
public class FtcAuto extends LinearOpMode {  //Linear op mode is being used so the program does not get stuck in loop()
    private ElapsedTime runtime = new ElapsedTime();
    private ElapsedTime timer = new ElapsedTime();

    DcMotor Left1;  //Left Drive Motor
    DcMotor Left2;
                    //Right Drive Motor
                      //Left Drive Motor
    DcMotor Right1;
    DcMotor Right2; //Left Drive Motor


    int zAccumulated;  //Total rotation left/right
    int target = 0;  //Desired angle to turn to

    GyroSensor sensorGyro;  //General Gyro Sensor allows us to point to the sensor in the configuration file.
    ModernRoboticsI2cGyro mrGyro;  //ModernRoboticsI2cGyro allows us to .getIntegratedZValue()

    OpticalDistanceSensor OpticalDistanceSensor; //MR ODS sensor

    static final double     WHITE_THRESHOLD = 0.2;  // spans between 0.1 - 0.5 from dark to light
    static final double     LEFT_APPROACH_SPEED  = 0.5;
    static final double     RIGHT_APPROACH_SPEED = -0.5;

    @Override
    public void runOpMode() {
        telemetry.addData("Status", "Initialized");

        Left1 = hardwareMap.dcMotor.get("Left1");  //Config File
        Left2 = hardwareMap.dcMotor.get("Left2");
        Left1.setDirection(DcMotor.Direction.FORWARD);  //This robot has two gears between motors and wheels. If your robot does not, you will need to reverse only the opposite motor
        Left2.setDirection(DcMotor.Direction.FORWARD);
        Left1.setMode(DcMotor.RunMode.RUN_USING_ENCODER);  //Controls the speed of the motors to be consistent even at different battery levels
        Left2.setMode(DcMotor.RunMode.RUN_USING_ENCODER);

        Right1 = hardwareMap.dcMotor.get("Right1");  //Config File
        Right2 = hardwareMap.dcMotor.get("Right2");
        Right1.setDirection(DcMotor.Direction.REVERSE);
        Right2.setDirection(DcMotor.Direction.REVERSE);
        Right1.setMode(DcMotor.RunMode.RUN_USING_ENCODER);  //Controls the speed of the motors to be consistent even at different battery levels
        Right2.setMode(DcMotor.RunMode.RUN_USING_ENCODER);

        sensorGyro = hardwareMap.gyroSensor.get("gyro");  //Point to the gyro in the configuration file
        mrGyro = (ModernRoboticsI2cGyro) sensorGyro;      //ModernRoboticsI2cGyro allows us to .getIntegratedZValue()
        mrGyro.calibrate();  //Calibrate the sensor so it knows where 0 is and what still is. DO NOT MOVE SENSOR WHILE BLUE LIGHT IS SOLID

        OpticalDistanceSensor = hardwareMap.opticalDistanceSensor.get("OpticalDistanceSensor");
        OpticalDistanceSensor.enableLed(true);

        waitForStart();
        runtime.reset();

        while (!(isStarted() || isStopRequested())) {

            // Display the light level while we are waiting to start
            telemetry.addData("Light Level", OpticalDistanceSensor.getLightDetected());
            telemetry.update();
            idle();
        }
        while (mrGyro.isCalibrating()) { //Ensure calibration is complete (usually 2 seconds)
        }

        while (opModeIsActive()) {
            telemetry.addData("Status", "Running: " + runtime.toString());

            driveStraight(4200, 0.30); //Drive straight for 30,000 encoder ticks (basically forever)

            //target = target - 45;

            //turnAbsolute(target);


        }
    }


    public void driveStraight(int duration, double power) {
        double leftSpeed; //Power to feed the motors
        double rightSpeed;

        double target = mrGyro.getIntegratedZValue();  //Starting direction
        double startPosition = Left1.getCurrentPosition();
        //Starting position

        while (Left1.getCurrentPosition() < duration + startPosition && opModeIsActive()) {  //While we have not passed out intended distance
            zAccumulated = mrGyro.getIntegratedZValue();  //Current direction


            while (opModeIsActive() && (OpticalDistanceSensor.getLightDetected() < WHITE_THRESHOLD)) {

                // Display the light level while we are looking for the line
                telemetry.addData("Light Level",  OpticalDistanceSensor.getLightDetected());
                telemetry.update();
            }
            leftSpeed = power + (zAccumulated - target) / 100;  //Calculate speed for each side
            rightSpeed = power - (zAccumulated - target) / 100;  //See Gyro Straight video for detailed explanation

            leftSpeed = Range.clip(leftSpeed, -1, 1);
            rightSpeed = Range.clip(rightSpeed, -1, 1);

            Left1.setPower(leftSpeed);
            Left2.setPower(leftSpeed);
            Right1.setPower(rightSpeed);
            Right1.setPower(rightSpeed);

            telemetry.addData("1. Left", Left1.getPower());
            telemetry.addData("1. Left", Left2.getPower());
            telemetry.addData("2. Right", Right1.getPower());
            telemetry.addData("2. Right", Right2.getPower());

            telemetry.addData("3. Distance to go", duration + startPosition - Left1.getCurrentPosition());
            telemetry.update();
        }

        Left1.setPower(0);
        Left2.setPower(0);
        Right1.setPower(0);
        Right2.setPower(0);
    }

    //This function turns a number of degrees compared to where the robot is. Positive numbers trn left.
    public void turn(int target) throws InterruptedException {
        turnAbsolute(target + mrGyro.getIntegratedZValue());
    }

    //This function turns a number of degrees compared to where the robot was when the program started. Positive numbers trn left.
    public void turnAbsolute(int target) {
        zAccumulated = mrGyro.getIntegratedZValue();  //Set variables to gyro readings
        double turnSpeed = 0.15;

        while (Math.abs(zAccumulated - target) > 3) {  //Continue while the robot direction is further than three degrees from the target
            if (zAccumulated > target) {  //if gyro is positive, we will turn right
                Left1.setPower(turnSpeed);
                Left2.setPower(turnSpeed);
                Right1.setPower(-turnSpeed);
                Right2.setPower(-turnSpeed);
            }

            if (zAccumulated < target) {  //if gyro is positive, we will turn left
                Left1.setPower(-turnSpeed);
                Left2.setPower(-turnSpeed);
                Right1.setPower(turnSpeed);
                Right2.setPower(turnSpeed);
            }

            zAccumulated = mrGyro.getIntegratedZValue();  //Set variables to gyro readings
            telemetry.addData("accu", String.format("%03d", zAccumulated));
            telemetry.update();
        }

        Left1.setPower(0);
        Left2.setPower(0);//Stop the motors
        Right1.setPower(0);
        Right2.setPower(0);
    }

}
